var keywordBlacklist = ["pronounc", "say", "vocabulary", "spelling", "mean", "definition", "slideshow", "full", "ebook", "auto-generated by youtube", "amazon.com", "amazon.es", "amazon.co.uk", "bit.ly", "tukunen.org", "bitiiy.com", "http://po.st"];
var viewCountThreshold = 500;
var currentAlgo = 0;

// when you hit next, if there's a video id in sessionstorage, immediately play that video, then find another suitable id and put it in sessionstorage
//                    if there isn't a video id in sessionstoage, find TWO suitable ids, play one, and stick the other in sessionstorage
// functions:  nextVideo() playVideo(id), findAndPlayVideo(), findAndStoreVideo()

function nextVideo() {
  var nextVideoId = sessionStorage.getItem('nextVideoId');
  if(nextVideoId === null) {
    console.log('nextVideoId not found in sessionStorage. Calling findAndPlayVideo() & findAndStoreVideo().');
    findAndPlayVideo();
    findAndStoreVideo();
  } else {
    console.log('nextVideoId found in sessionstorage. Calling playVideo(nextVideoId) & findAndStoreVideo()')
    playVideo(nextVideoId);
    sessionStorage.removeItem('nextVideoId')
    findAndStoreVideo();
  }
}

function playVideo(id) {
  player.loadVideoById(id);
}

function findAndPlayVideo() {
  word = randomCharacters();
  var requestStr = 'https://www.googleapis.com/youtube/v3/search?order=date&part=snippet&q=' + word + '&type=video&maxResults=50&key=AIzaSyAHu80T94GGhKOzjBs9z5yr0KU8v48Zh60';
  $.ajax({
      type: "GET",
      url: requestStr,
      dataType: "jsonp",
      contentType: "application/json; charset=utf-8",
      jsonpCallback: 'findAndPlayVideoHelper'
  });
}

function findAndPlayVideoHelper(responseJSON) {
  if (responseJSON.items.length < 1) {
    console.log("[findAndPlayVideoHelper] No videos found for search term. Restarting search.");
    findAndPlayVideo();
  } else {
    var videoChoice = Math.floor(Math.random() * responseJSON.items.length);
    // console.log("choosing video #" + videoChoice + " of " + responseJSON.items.length);
    var videoId = responseJSON.items[videoChoice].id.videoId;
    var url2 = "https://www.googleapis.com/youtube/v3/videos?part=snippet%2C+statistics&id=" + videoId + "&key=AIzaSyAHu80T94GGhKOzjBs9z5yr0KU8v48Zh60";
    $.getJSON(url2).then(function(responseJSON2) {
      if(responseJSON2.items[0].statistics.viewCount > viewCountThreshold) {
        console.log("[findAndPlayVideoHelper] View count too high. Restarting search.");
        findAndPlayVideo();
      } else if(isBlacklisted(responseJSON2.items[0].snippet.title, responseJSON2.items[0].snippet.description)) {
        console.log("[findAndPlayVideoHelper] Title and/or description contains blacklisted word. Restarting search.")
        findAndPlayVideo();
      } else {
        console.log("[findAndPlayVideoHelper] Success! Immediately playing video ID = " + responseJSON2.items[0].id);
        currentAlgo = 0;
        player.loadVideoById(responseJSON2.items[0].id);
      }
    });
  }
}

function findAndStoreVideo() {
  word = randomCharacters();
  var requestStr = 'https://www.googleapis.com/youtube/v3/search?order=date&part=snippet&q=' + word + '&type=video&maxResults=50&key=AIzaSyAHu80T94GGhKOzjBs9z5yr0KU8v48Zh60';
  $.ajax({
      type: "GET",
      url: requestStr,
      dataType: "jsonp",
      contentType: "application/json; charset=utf-8",
      jsonpCallback: 'findAndStoreVideoHelper'
  });
}

function findAndStoreVideoHelper(responseJSON) {
  if (responseJSON.items.length < 1) {
    console.log("[findAndStoreVideoHelper] No videos found for search term. Restarting search.");
    findAndStoreVideo();
  } else {
    var videoChoice = Math.floor(Math.random() * responseJSON.items.length);
    // console.log("choosing video #" + videoChoice + " of " + responseJSON.items.length);
    var videoId = responseJSON.items[videoChoice].id.videoId;
    var url2 = "https://www.googleapis.com/youtube/v3/videos?part=snippet%2C+statistics&id=" + videoId + "&key=AIzaSyAHu80T94GGhKOzjBs9z5yr0KU8v48Zh60";
    $.getJSON(url2).then(function(responseJSON2) {
      if(responseJSON2.items[0].statistics.viewCount > viewCountThreshold) {
        console.log("[findAndStoreVideoHelper] View count too high. Restarting search.");
        findAndStoreVideo();
      } else if(isBlacklisted(responseJSON2.items[0].snippet.title, responseJSON2.items[0].snippet.description)) {
        console.log("[findAndStoreVideoHelper] Title and/or description contains blacklisted word. Restarting search.")
        findAndStoreVideo();
      } else {
        console.log("[findAndStoreVideoHelper] Success! Storing video ID = " + responseJSON2.items[0].id);
        currentAlgo = 0;
        sessionStorage.setItem('nextVideoId', responseJSON2.items[0].id);
      }
    });
  }
}

function isBlacklisted(title, description) {
  title = title.toLowerCase();
  description = description.toLowerCase();
  for(var i = 0; i < keywordBlacklist.length; i++) {
    if(title.includes(keywordBlacklist[i]) || description.includes(keywordBlacklist[i])) {
      return true;
    }
  }
  return false;
}

// ---------------------------- YOUTUBE API BULLSHIT ----------------------------

// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement('script');

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player('player', {
    height: '390',
    width: '640',
    playerVars: {
      'showinfo': 0,
      'controls': 0,
      'rel': 0,
      'showinfo': 0
    },
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange,
      'onError': onError
    }
  });
}

function onError(event) {
  console.log("Error encountered. Retrying.");
  nextVideo();
}

// 4. The API will call this function when the video player is ready.
function onPlayerReady(event) {

    nextVideo();

    $("#next").click(function(event) {
      event.preventDefault();
      $('#nextImg').addClass('animated bounceOutDown');
      console.log("randomVideo clicked");
      nextVideo();
    });

    function getIdFromUrl(url) {
      var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      var match = url.match(regExp);
      if (match && match[2].length == 11) {
        return match[2];
      } else {
        console.log("Error: Invalid URL");
      }
    }
}


// 5. The API calls this function when the player's state changes.
//    The function indicates that when playing a video (state=1),
//    the player should play for six seconds and then stop.
var done = false;
function onPlayerStateChange(event) {
  if (event.data == YT.PlayerState.ENDED) {
    nextVideo();
  } else if(event.data == YT.PlayerState.PLAYING) {
    $('#nextImg').removeClass('animated bounceOutDown');
  }
}

$(document).on("keydown", function (e) {
  if(e.keyCode === 32 || e.keyCode === 40) {
    $('#nextImg').addClass('animated bounceOutDown');
    nextVideo();
  }
});

// ---------------------------- RANDOM WORD/PHRASE GENERATORS ----------------------------

function randomCharacters() {
  var inputLength = Math.floor(Math.random() * 3) + 3;
  var word = chance.string({length: inputLength, pool: 'abcdefghijklmnopqrstuvwxyz'});
  // var word = chance.character({alpha: true}) + chance.character({alpha: true}) + chance.character({alpha: true}) + chance.character({alpha: true}) + chance.character({alpha: true});
  return word;
}
